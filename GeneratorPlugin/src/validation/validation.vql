package validation

//import epackage "http://www.slizaa.org/neo4j/opencypher/OpenCypher"
import epackage "platform:/resource/GeneratorPlugin/model/OpenCypher.ecore"

pattern hasReturn(q : SinglePartQuery, r : Return) {
    SinglePartQuery.^return(q,r);
}

@Constraint(severity = "error", key ={q}, message ="error")
pattern hasNoReturn(q : SinglePartQuery) {
    neg find hasReturn(q,_);
}

pattern hasMatch (q : SinglePartQuery, m: Match){
	SinglePartQuery.readingClauses(q,m);
}

@Constraint(severity = "error", key ={q}, message ="error")
pattern hasNoMatch(q : SinglePartQuery) {
    neg find hasMatch(q,_);
}

pattern hasPattern(m : Match, p: Pattern){
	Match.^pattern(m,p);
}

@Constraint(severity = "error", key ={m}, message ="error")
pattern hasNoPattern(m : Match) {
    neg find hasPattern(m,_);
}

pattern hasReturnItems(body: ReturnBody, items : ReturnItems){
	ReturnBody.returnItems(body, items);
}

@Constraint(severity = "error", key ={body}, message ="error")
pattern hasNoReturnItems(body : ReturnBody) {
    neg find hasReturnItems(body,_);
}

pattern hasReturnItem(items : ReturnItems, item: ReturnItem){
	ReturnItems.items(items, item);
}

@Constraint(severity = "error", key ={items}, message ="error")
pattern hasNoReturnItem(items : ReturnItems) {
    neg find hasReturnItem(items,_);
}

//patternPart validator 

pattern hasPart (pp : PatternPart, app : AnonymousPatternPart){
	PatternPart.part(pp , app);
}

pattern hasNoPart(pp : PatternPart) {
    neg find hasPart(pp,_);
}

pattern hasVar (pp : PatternPart, varDec : VariableDeclaration){
	PatternPart.^var(pp , varDec);
}

pattern hasNoVar(pp : PatternPart) {
    neg find hasVar(pp,_);
}


pattern notFilled(pp : PatternPart){
	find hasNoVar(pp);
}or{
	find hasNoPart(pp);
}

pattern valid(pp : PatternPart){
	AnonymousPatternPart(pp);
	}or{
	neg find notFilled(pp);	
}

@Constraint(severity = "error", key ={pp}, message ="error")
pattern notValid(pp : PatternPart){
	neg find valid(pp);
}

@Constraint(severity = "error", key ={pp}, message ="error")
pattern anonimmegvar(pp : AnonymousPatternPart){
	PatternPart.^var(pp, _);
	AnonymousPatternPart(pp); 
	
}
