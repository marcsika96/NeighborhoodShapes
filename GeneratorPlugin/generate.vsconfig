import epackage "platform:/resource/GeneratorPlugin/model/OpenCypher%20másolata.ecore"
import viatra "platform:/resource/GeneratorPlugin/src/validation/validation.vql"

//ez működőképes van benne már label is
metamodel target  {
Cypher, Cypher.statement, Cypher.statement,
AllOptions,AllOptions.explain,AllOptions.profile,
SinglePartQuery, SinglePartQuery.readingClauses, SinglePartQuery.return,
Match, Match.optional, Match.pattern,
Pattern, Pattern.patterns, 
PatternPart,PatternPart.var,PatternPart.part,
PatternElement,PatternElement.nodepattern,
NodePattern, NodePattern.properties, NodePattern.variable,
VariableDeclaration,
MapLiteral, MapLiteral.entries,
MapLiteralEntry, MapLiteralEntry.value,
StringLiteral, 
Return, Return.distinct, Return.body,
ReturnBody,ReturnBody.returnItems,
ReturnItems, ReturnItems.all,ReturnItems.items,
ReturnItem, ReturnItem.expression,
VariableRef, VariableRef.variableRef,
SingleQuery,
RegularQuery,
Query,
Statement,
ReadingClause,
Clause,
AnonymousPatternPart,
NodeLabels,NodeLabels.nodeLabels, NodeLabel,
Properties,
Literal,
Expression, 
PropertyExpression,
QueryOptions
	
}


metamodel targetChainnel  {
Cypher, Cypher.statement, Cypher.statement,
AllOptions,AllOptions.explain,AllOptions.profile,
SinglePartQuery, SinglePartQuery.readingClauses, SinglePartQuery.return,
Match, Match.optional, Match.pattern,
Pattern, Pattern.patterns, 
PatternPart,PatternPart.var,PatternPart.part,
PatternElement,PatternElement.nodepattern,
NodePattern, NodePattern.properties, NodePattern.variable,
VariableDeclaration,
MapLiteral, MapLiteral.entries,
MapLiteralEntry, MapLiteralEntry.value,
StringLiteral, 
Return, Return.distinct, Return.body,
ReturnBody,ReturnBody.returnItems,
ReturnItems, ReturnItems.all,ReturnItems.items,
ReturnItem, ReturnItem.expression,
VariableRef, VariableRef.variableRef,
SingleQuery,
RegularQuery,
Query,
Statement,
ReadingClause,
Clause,
AnonymousPatternPart,
NodeLabels,NodeLabels.nodeLabels, NodeLabel,
Properties,
Literal,
Expression, 
PropertyExpression,
QueryOptions,
//chainhez kellő eddig nem levő dolgok
PatternElementChain,PatternElementChain.nodePattern,PatternElementChain.relationshipPattern,
RelationshipPattern,RelationshipPattern.incoming,RelationshipPattern.outgoing,RelationshipPattern.detail,
RelationshipDetail,RelationshipDetail.optional, RelationshipDetail.variable,RelationshipDetail.properties,

RelationshipTypes,
PatternElement.chain
	
}




generate {
	metamodel = targetChainnel
	partial-model = { "platform:/resource/GeneratorPlugin/model/SinglePartQuery2.xmi" }
	number = 5
	solver = ViatraSolver
	constraints = { package validation }
	config = {
		log-level = none,
		"diversity-range" = "1"
	}
	scope = {
		# node += 100..*, # string += {"A"}, # int += { 1 },
		#<SinglePartQuery> = 1, #<Match>= 1, #<Return>= 1  
		//#<VariableDeclaration> += 0..3
		//#<NodePattern> +=0
		//,  #<PatternElement> += 0,  #<VariableRef> += 0
	}
	debug = "platform:/resource/GeneratorPlugin/debug"
	output = "platform:/resource/GeneratorPlugin/models"
	statistics = "platform:/resource/GeneratorPlugin/statistics.csv"
}



//metamodel target2  {
//Cypher, Cypher.statement, Cypher.statement,
//AllOptions,AllOptions.explain,AllOptions.profile,
//SinglePartQuery, SinglePartQuery.readingClauses, SinglePartQuery.return,
//Match, Match.optional, Match.pattern,
//Pattern, Pattern.patterns, 
//PatternPart,PatternPart.var,PatternPart.part,
//PatternElement,PatternElement.nodepattern,
//NodePattern, NodePattern.properties, NodePattern.variable,
//VariableDeclaration,
//MapLiteral, MapLiteral.entries,
//MapLiteralEntry, MapLiteralEntry.value,
//StringLiteral, //itt tartok
//Return, Return.distinct, Return.body,
//ReturnBody,ReturnBody.returnItems,
//ReturnItems, ReturnItems.all,ReturnItems.items,
//ReturnItem,ReturnItem.alias, ReturnItem.expression,
//VariableRef, VariableRef.variableRef,
//SingleQuery,
//RegularQuery,
//Query,
//Statement,
//ReadingClause,
//Clause,
//AnonymousPatternPart,
//NodeLabels,
//Properties,
//Literal,
//Expression, 
//PropertyExpression,
//QueryOptions,	
//Where, Where.expression,
//AndExpression,AndExpression.operator,AndExpression.left,AndExpression.right,
//ComparisonExpression,ComparisonExpression.operator,ComparisonExpression.left,ComparisonExpression.right,
//PropertyLookupExpression,
//PropertyLookup, PropertyLookup.propertyKeyName,PropertyLookup.propertyOperator,
//NumberLiteral,NumberLiteral.value
//
//
//	
//}
//
//metamodel target3  {
//Cypher, Cypher.statement, Cypher.statement,
//AllOptions,AllOptions.explain,AllOptions.profile,
//SinglePartQuery, SinglePartQuery.readingClauses, SinglePartQuery.return,
//Match, Match.optional, Match.pattern,
//Pattern, Pattern.patterns, 
//PatternPart,PatternPart.var,PatternPart.part,
//PatternElement,PatternElement.nodepattern,
//NodePattern, NodePattern.properties, NodePattern.variable,
//VariableDeclaration,
//MapLiteral, MapLiteral.entries,
//MapLiteralEntry, MapLiteralEntry.value,
//StringLiteral, //itt tartok
//Return, Return.distinct, Return.body,
//ReturnBody,ReturnBody.returnItems,
//ReturnItems, ReturnItems.all,ReturnItems.items,
//ReturnItem,ReturnItem.alias, ReturnItem.expression,
//VariableRef, VariableRef.variableRef,
//SingleQuery,
//RegularQuery,
//Query,
//Statement,
//ReadingClause,
//Clause,
//AnonymousPatternPart,
//NodeLabels,
//Properties,
//Literal,
//Expression, 
//PropertyExpression,
//QueryOptions,
/////új cuuccokk
//PatternElementChain, PatternElementChain.nodePattern, PatternElementChain.relationshipPattern,
//RelationshipsPattern, RelationshipPattern.detail, RelationshipPattern.incoming, RelationshipPattern.outgoing,
//RelationshipDetail, RelationshipDetail.optional,RelationshipDetail.properties,RelationshipDetail.range,RelationshipDetail.relTypeNames,RelationshipDetail.variable,
//Where, Where.expression,
//AndExpression, AndExpression.operator,AndExpression.left,AndExpression.right,
//NotExpression, NotExpression.left,NotExpression.nodeLabels,NotExpression.operator, NotExpression.propertyLookups,
//ComparisonExpression,ComparisonExpression.operator,ComparisonExpression.left,ComparisonExpression.right,
//PropertyLookupExpression,PropertyLookupExpression.left, PropertyLookupExpression.nodeLabels,PropertyLookupExpression.propertyLookups,
//PropertyLookup, PropertyLookup.propertyKeyName,PropertyLookup.propertyOperator,
//Count, Count.nodeLabels, Count.propertyLookups
//	
//}