package validation

//import epackage "http://www.slizaa.org/neo4j/opencypher/OpenCypher"
import epackage "platform:/resource/GeneratorPlugin/model/OpenCypher%20másolata.ecore"


pattern hasReference(retI : ReturnItem, variRef : Expression){
	VariableRef(variRef);
	ReturnItem.expression(retI, variRef);
}

@Constraint(severity ="error", key={ri}, message = "error")
pattern hasNoReference(ri : ReturnItem){
	neg find hasReference(ri, _);
}

pattern wellLookingPattern (^pattern : Pattern, patternElement : PatternElement){
	Pattern.patterns(^pattern,patternElement);
}

pattern wellLookingPatternElement(patternElement : PatternElement, nodePattern : NodePattern){
	PatternElement.nodepattern(patternElement, nodePattern);
}



@Constraint(severity ="error", key={^pattern}, message = "error")
pattern notWellLookingPatter(^pattern : Pattern){
	neg find wellLookingPattern(^pattern , _);
}

@Constraint(severity ="error", key={patternElement}, message = "error")
pattern notWellLookingPatternElement(patternElement : PatternElement){
	neg find wellLookingPatternElement(patternElement, _);
}

@Constraint(severity ="error", key={patternElement}, message = "error")
pattern  patternElementHasVar(patternElement : PatternElement, variable : VariableDeclaration){
	PatternElement.^var(patternElement,variable);
}

@Constraint(severity ="error", key={patternElement}, message = "error")
pattern  patternElementHasPart(patternElement : PatternElement, part : PatternPart){
	PatternElement.part(patternElement,part);
}

pattern pe(pe:PatternElement) {
	PatternElement(pe);
}


@Constraint(severity ="error", key={patternPart}, message = "error")
pattern notPatternElement( patternPart : PatternPart){
	neg find pe(patternPart);
}

@Constraint(severity ="error", key={mapLiteral}, message = "error")
pattern notWellLookingMapliteral(mapLiteral : MapLiteral, nodeLabel: NodeLabel){
	MapLiteral.nodeLabels(mapLiteral,nodeLabel);
}


//ahhoz kell hogy ne ott legyene különböző 2 lekédrezés hogy milyen méllyen cíkmkézett
pattern wellDeepMap(mapLiteralEnrty: MapLiteralEntry, string : StringLiteral){
	MapLiteralEntry.value(mapLiteralEnrty,string);
}

@Constraint(severity ="error", key={mapLiteralEnrty}, message = "error")
pattern notWellDeepMap(mapLiteralEnrty : MapLiteralEntry){
	neg find wellDeepMap(mapLiteralEnrty, _);
}







































//-------vége a jo reszeknek


//pattern hasReturn(q : SinglePartQuery, r : Return) {
//    SinglePartQuery.^return(q,r);
//}
//
//@Constraint(severity = "error", key ={q}, message ="error")
//pattern hasNoReturn(q : SinglePartQuery) {
//    neg find hasReturn(q,_);
//}

//pattern hasMatch (q : SinglePartQuery, m: Match){
//	SinglePartQuery.readingClauses(q,m);
//}
//
//@Constraint(severity = "error", key ={q}, message ="error")
//pattern hasNoMatch(q : SinglePartQuery) {
//    neg find hasMatch(q,_);
//}

//pattern hasPattern(m : Match, p: Pattern){
//	Match.^pattern(m,p);
//}
//
//@Constraint(severity = "error", key ={m}, message ="error")
//pattern hasNoPattern(m : Match) {
//    neg find hasPattern(m,_);
//}

//pattern hasReturnItems(body: ReturnBody, items : ReturnItems){
//	ReturnBody.returnItems(body, items);
//}
//
//@Constraint(severity = "error", key ={body}, message ="error")
//pattern hasNoReturnItems(body : ReturnBody) {
//    neg find hasReturnItems(body,_);
//}
//
//pattern hasReturnItem(items : ReturnItems, item: ReturnItem){
//	ReturnItems.items(items, item);
//}
//
//@Constraint(severity = "error", key ={items}, message ="error")
//pattern hasNoReturnItem(items : ReturnItems) {
//    neg find hasReturnItem(items,_);
//}

//patternPart validator 

//------------------eredeti alternatíva ami szar

//pattern hasPart (pp : PatternPart, app : AnonymousPatternPart){
//	PatternPart.part(pp , app);
//}
//
//pattern hasNoPart(pp : PatternPart) {
//    neg find hasPart(pp,_);
//}
//
//pattern hasVar (pp : PatternPart, varDec : VariableDeclaration){
//	PatternPart.^var(pp , varDec);
//}
//
//pattern hasNoVar(pp : PatternPart) {
//    neg find hasVar(pp,_);
//}
//
//
//pattern notFilled(pp : PatternPart){
//	find hasNoVar(pp);
//}or{
//	find hasNoPart(pp);
//}
//
////pattern valid(pp : PatternPart){
////	PatternElement(pp);
////	}or{
////	PatternPart.^var(pp, _);
////	PatternPart.part(pp, _);
////	}
////
////@Constraint(severity = "error", key ={pp}, message ="error")
////pattern notValid(pp : PatternPart){
////	neg find valid(pp);
////}
//@Constraint(severity = "error", key ={pp}, message ="error")
//pattern ppartAndNotElementAndNotFilled(pp : PatternPart) {
//	find notFilled(pp);
//	neg find pe(pp);
//}
//
//pattern pe(pe:PatternElement) {
//	PatternElement(pe);
//}
//
//@Constraint(severity = "error", key ={pp}, message ="error")
//pattern anonimAndSomething(pp : PatternElement){
//	PatternPart.^var(pp, _);
//	PatternElement(pp); 
//	
//} or {
//	PatternPart.part(pp, _);
//	PatternElement(pp); 
//}

//-------------------eddig tart

//pattern hasEntry(map : MapLiteral, entry : MapLiteralEntry){
//	MapLiteral.entries(map, entry);
//}
//
//@Constraint(severity = "error", key ={map}, message ="error")
//pattern hasNoEntry(map : MapLiteral){
//	neg find hasEntry(map, _);
//}
//	
//pattern hasMapValue(entry : MapLiteralEntry, value : Expression){
//	MapLiteralEntry.value(entry, value);
//}	
//
//@Constraint(severity = "error", key ={entry}, message ="error")
//pattern hasNoMapValue(entry : MapLiteralEntry){
//	neg find hasMapValue(entry, _);
//}
	

//pattern goodReferenceToVariable(q : SinglePartQuery, match : Match, vari : VariableDeclaration,  variRef : VariableRef ){	
//	SinglePartQuery.readingClauses(q ,match);
//	Match.^pattern.patterns.^var(match, vari);
//	SinglePartQuery.^return.body.returnItems.items.expression(q , variRef);
//	
//}	
//
//
//@Constraint(severity = "error", key ={variRef}, message ="error")
//pattern notGoodReferenceToVari(variRef : VariableRef){
//	neg find goodReferenceToVariable(_, _, vari ,variRef );
//	VariableRef.variableRef(variRef,vari);
//}
//
//@Constraint(severity = "error", key ={varRef}, message ="error")
//pattern unfinishableReferenceByScope(varRef : VariableRef){
//	neg find goodReferenceToVariable(_,_,_,varRef);
//}

//vagy van saját variabledecje egy returnitemnek vagy csak referenciája van a matchbol